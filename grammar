program ::= extern_list decl_list

extern_list ::= extern extern_list
              | ε

extern ::= "extern" return_type IDENTIFIER "(" params ")" ";"

decl_list ::= decl decl_list 
            | decl

decl ::= var_decl
       | fun_decl

var_decl ::= var_type IDENT ";"

fun_decl ::= return_type IDENT "(" params ")" block

var_type ::= "int"
           | "float"
		   | "bool"

return_type ::= "void"
              | "int"
			  | "float"
			  | "bool"

params ::= ε
         | "void"
		 | param_list

param_list ::= param "," param_list
             | param

param ::= var_type IDENT

block ::= "{" local_decls stmt_list "}"

local_decls ::= local_decl local_decls
              | ε

local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list
            | ε

stmt ::= expr_stmt
       | block
	   | if_stmt
	   | while_stmt
	   | return_stmt

expr_stmt ::= expr ";"
            | ";"

while_stmt ::= "while" "(" expr ")" stmt

if_stmt ::= "if" "(" expr ")" block else_stmt

else_stmt ::= "else" block
            | ε

return_stmt ::= "return" ";"
              | "return" expr ";"

expr ::= IDENT "=" expr
       | rval0

rval0 ::= rval1
        | rval1 "||" rval0

rval1 ::= rval2
        | rval2 "&&" rval1

rval2 ::= rval3
        | rval3 "==" rval2
		| rval3 "!=" rval2

rval3 ::= rval4
        | rval4 "<=" rval3
		| rval4 "<" rval3
		| rval4 ">=" rval3
		| rval4 ">" rval3

rval4 ::= rval5
        | rval5 "+" rval4
		| rval5 "-" rval4

rval5 ::= rval6
        | rval6 "*" rval5
        | rval6 "/" rval5
        | rval6 "%" rval5

rval6 ::= rval7
        | "-" rval6
		| "!" rval6

rval7 ::= IDENT
        | IDENT "(" args ")"
		| "(" expr ")"
		| INT_LIT
		| FLOAT_LIT
		| BOOL_LIT

args ::= arg_list
        | ε

arg_list ::= expr "," arg_list
           | expr

